import { app, BrowserWindow, ipcMain } from 'electron';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
process.env["ELECTRON_DISABLE_SECURITY_WARNINGS"] = 'true';


const createWindow = (): void => {
    let width: number;
    if (process.env.ENV == 'DEV') {
        width = 1200;
    }
    else {
        width = 496;
    }
    // Create the browser window.
    const mainWindow = new BrowserWindow({
        titleBarStyle: "hidden",
        width: width,
        height: 659,
        backgroundColor: "white",
        resizable: false,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
        }
    });

    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    // Open the DevTools when developing
    if (process.env.ENV == 'DEV') {
        mainWindow.webContents.openDevTools();
    }
  
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

// Receive and respond to synchronous message
// Set or remove notification badge
ipcMain.on('badge', (event, args) => {
    if (process.platform === 'darwin') {
        if (args != 0) {
            if (app.dock.getBadge()) {
                const badgeCount = parseInt(app.dock.getBadge()) + args;
                badgeCount > 0 ?
                app.dock.setBadge((parseInt(app.dock.getBadge()) + args).toString()) :
                app.dock.setBadge('')
            }
            else {
                args > 0 ?
                app.dock.setBadge(args.toString()) :
                app.dock.setBadge('')
            }
        }
        else {
            app.dock.setBadge('');
        }
        event.returnValue = true;
    }
    else {
        event.returnValue = false;
    }
});